# メモ

# 最初の形
/*
package main
*/

- Goのプログラムは何らかのpackageに属している必要あり
- 1つはmain packageである必要がある



# 関数の記述の仕方
/*
func hogehoge(){
    /*
    やりたい処理
    */
}
*/



# 変数宣言
/*
var 変数名 データ型
var 変数名 = 値 でもOK
変数名:= 値 暗記必須
*/
- Goはデータ型省略可能



## 変数名のルール
- 使える文字 : アルファベット, 数字, アンダースコア
- 小文字と大文字は区別される
- 1文字目が小文字 = pacakage内のみで使える変数
- 1文字目が大文字 = 他のpacakageでも使える変数



# データ型
- Goは静的型付け言語 <=> 動的型付け言語(Ruby, Python, JavaScript, PHP)
= 変数にデータを入れるときデータ型を指定(Java, C, kotlin)

## 数値型
- 整数型
[Int8, Int16, Int32, Int64]
・ 扱える桁数の違い、「Int」のみでも可
- 少数型
[float32, float64]
- 通常は「float64」で問題なし

## 文字列型
- string型
ex) var 変数名 string = "Hello world"


## ブール型
- True or False
ex) var 変数 bool = 5 > 1
出力) true



# 配列
- 0から始まる
/*
変数 := [要素数]データ型{データ１,データ２,...}

- 要素数を省略可能
要素数 = [...]と記述
*/
ex) a := [3]string{"python", "html", "java"}

## 配列内のデータを変更したい場合
/*
変数名[インデックス] = "変更後の値"
*/
ex) a[1] = "ruby"
出力) "html" → "ruby"

## 多次元配列

変数 := [要素数][要素数]データ型{{"python", "html"}, {"java", "c"}}
出力) fmt.Println(a[0][0]) = "python"
     fmt.Println(a[0][1]) = "html"
     fmt.Println(a[1][0]) = "java"
     fmt.Println(a[1][1]) = "c"



# 演算子
## 四則演算
- +, -, *, /, %

## 関係演算子
- <, >, <=, >=, ==, !=

## 論理演算子
- &&, ||

## 代入演算子
- +=, -=

## インクリメント
- 値を１増やす
- 変数名++

## デクリメント
- 変数名--

# 条件分岐
## if文
/*
if 条件{
    条件を満たした時の処理
}
*/
ex) age := 22
    if age >= 20{
        fmt.println("adult")
    }
出力) adult

## if else文
/*
if 条件{
    条件を満たした時の処理
}else{
    条件を満たさなかった時の処理
}
*/

## さらに条件を増やしたい時
/*
if 条件{
    条件を満たした時
}else if 条件2{
    条件2を満たした時
}else{
    全て満たさなかった時
}
*/

## 簡易版
/*
if 簡易文; 条件A {
    条件Aを満たした時
}else if 条件B {
    条件Bを満たした時
}else{
    全て満たさない場合
}
*/

# switch文
- 値を比較して条件分岐を行う場合、if文より簡単になることがある
/*
 switch 式 {
  case A:
    処理A1
    処理A2
    処理A3
  case B:
    処理B1
    処理B2
    処理B3
  case C:
    処理C1
    処理C2
    処理C3
  default:
    処理Z1
    処理Z2
    処理Z3
  }
*/


# 繰り返し処理
/*
for i:=0; i<=4; i++{
    繰り返し中の処理
}
*/

## break
ex)
for i:=0; i<=4; i++{
    if i==3{
        break
    }
    繰り返し中の処理
}
- この場合iが3になった時点で処理が終了する

## continue
ex)
for i:=0; i<=4; i++{
    if i==3{
        continue
    }
    繰り返し中の処理
}
- 条件があった時、その処理をスキップする

# 関数

## 基本の方
/*
func 関数名(引数名 データ型){
    実行したい処理
}
*/
ex)
func sayHallo(greeting string){
    fmt.Println(greeting)
}

func main(){
    sayHallo("Good Morning")
}
出力) Good Morning

# 構造体

- 異なるデータ型の変数を１つにまとめたもの
- フィールド = 構造体で宣言した変数

## 定義の仕方
/*
type 構造体 struct {
    field1
    field2
}
*/

# メソッド
- 構造体などの特定の型に関連づけられた関数
 -- test3.goを参照

## 定義の仕方
/*
func (x 構造体名) メソッド名(){

}
*/


# package

## fmt
- fmt.Print
・与えられた引数をスペースで区切って標準出力に出力
- fmt.Plintf
・書式付きの文字列と一緒に与えられた引数を標準出力に出力
- fmt.Println 
・与えられた引数をスペースで区切って標準出力に出力し、最後に改行を追加


## reflect
- reflect.TypeOf
・データ型を出力


